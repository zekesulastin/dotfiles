#!/usr/bin/env bash

_nokill() {
	printf "%d" $_current_time > "$XDG_RUNTIME_DIR/lowmem-warn-time"

	_i=30
	while (( _i > 0 )); do
		if [[ $((_i % 2)) = 0 ]]; then
			notify-send --urgency=critical --expire-time=1250 --icon=dialog-error "RAM Critical!" "RAM is <b>$1%</b> full.  Killing <b>$2</b> in $_i seconds; touch <i>$XDG_RUNTIME_DIR/nokill</i> to abort."
		fi

		if [[ -e "$XDG_RUNTIME_DIR/nokill" ]]; then
			notify-send --urgency=critical --icon=dialog-warning "NOKILL detected!" "I hope you know what you're doing, space cowboy; rm <i>$XDG_RUNTIME_DIR/nokill</i> as soon as you are done."
			return
		fi

		sleep 1
		_i=$((_i - 1))
	done

	pkill $2
	notify-send --urgency=critical --icon=dialog-warning "$2 killed!" "We are sorry for any inconvenience this may have caused."
	rm "$XDG_RUNTIME_DIR/lowmem-is-working"
}

if [[ -e "$XDG_RUNTIME_DIR/lowmem-suppress" ]] || [[ -e "$XDG_RUNTIME_DIR/lowmem-is-working" ]]; then
	exit
fi

touch "$XDG_RUNTIME_DIR/lowmem-is-working"

if [[ ! -e "$XDG_RUNTIME_DIR/lowmem-warn-time" ]]; then
	_warned_time=0
	date +%s > "$XDG_RUNTIME_DIR/lowmem-warn-time"
else
	_warned_time=$(<"$XDG_RUNTIME_DIR/lowmem-warn-time")
fi

_current_time=$(date +%s)
if (( $((_current_time - _warned_time)) < 60 )); then
	rm "$XDG_RUNTIME_DIR/lowmem-is-working"
	exit
fi

pkill dunst # dunst leaks a bit right now; this ensures it is cleared before killing more things

if (( $1 < 85 )); then # In case killing dunst saved the day
	rm "$XDG_RUNTIME_DIR/lowmem-is-working"
	exit
elif (( $1 < 90 )); then
	notify-send --urgency=critical --icon=dialog-warning "RAM Low!" "RAM is <b>$1%</b> full."
	printf "%d" $_current_time > "$XDG_RUNTIME_DIR/lowmem-warn-time"
elif pgrep firefox; then
	_nokill $1 firefox
elif pgrep skype; then
	_nokill $1 skype
elif pgrep byond.exe; then
	_nokill $1 byond.exe
else
	notify-send --urgency=critical --icon=dialog-error "RAM Critical!" "RAM is <b>$1%</b> full.  No usual suspects left to kill.  You're screwed now, space cowboy."
fi

rm "$XDG_RUNTIME_DIR/lowmem-is-working"
